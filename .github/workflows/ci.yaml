name: Primus-CI-TAS-test

on:
  workflow_dispatch:
  push:
    branches:
      - dev/wenx/speedup_ci_build
    tags:
      - "v*"
  pull_request:

jobs:
  code-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - run: echo "🎉 Begin Primus Python Lint."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - uses: actions/checkout@v4
      - run: git config --global --add safe.directory /github/workspace
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install Autoflake
        run: pip install autoflake==2.3.1
      - name: Run Autoflake
        if: always()
        run: |
          output=$(autoflake . --remove-all-unused-imports --remove-unused-variables --expand-star-imports --ignore-init-module-imports --recursive)
          if [[ -n "$output" ]]; then
            echo "Autoflake check failed: $output"
            exit 1
          else
            echo "Autoflake check success."
          fi
      - uses: isort/isort-action@v1
        if: always()
        with:
          configuration: "--profile black --check-only --diff"
      - uses: psf/black@stable
        if: always()
        with:
          options: "--check --diff --color --verbose --line-length=110"

  install-turbo:
    runs-on: [tas-k8s]
    env:
      PRIMUS_WORKDIR: /apps/tas/0_public/primus_k8s_ci
    steps:
      - run: echo "🎉 Begin Primus-Turbo Checkout."
      - name: Checkout Repo Primus-Turbo
        uses: actions/checkout@v4
        with:
          repository: AMD-AIG-AIMA/Primus-Turbo
          submodules: "recursive"
          path: Primus-Turbo
          token: ${{ secrets.PRIMUS_TURBO_SECRET }}
          ref: 9499c6e74c9d62997775dd841ab268eb9fca98b4 # feat(async-tp): support fused_all_gather_matmul for async-tp.
      - run: echo "Begin Primus-Turbo Install."
      - name: Install Primus-Turbo
        run: |
          if [ -d "${PRIMUS_WORKDIR}/Primus-Turbo" ]; then
            mv ${PRIMUS_WORKDIR}/Primus-Turbo ${PRIMUS_WORKDIR}/Primus-Turbo.old.$(date +%s) || true
          fi
          mv Primus-Turbo ${PRIMUS_WORKDIR}/
          echo 'Primus-Turbo dir: ${PRIMUS_WORKDIR}/Primus-Turbo'
          git config --global --add safe.directory ${PRIMUS_WORKDIR}/Primus-Turbo
          cd ${PRIMUS_WORKDIR}/Primus-Turbo
          start_time=$(date +%s)
          echo '✅ [Pip install requirements] started at: $(date)'
          mkdir -p ./pip_cache
          MAX_JOBS=128 pip install --cache-dir=${PRIMUS_WORKDIR}/primus-cache --no-build-isolation --no-clean -r requirements.txt
          end_time=$(date +%s)
          elapsed=$((end_time - start_time))
          echo '✅ [Pip install requirements] ended at: $(date)'
          echo '⏱️ [Pip install requirements] Total elapsed time: ${elapsed} seconds'
          start_time=$(date +%s)
          echo '✅ [build primus-turbo] started at: $(date)'
          python setup.py develop
          end_time=$(date +%s)
          elapsed=$((end_time - start_time))
          echo '✅ [build primus-turbo] ended at: $(date)'
          echo '⏱️ [build primus-turbo] Total elapsed time: ${elapsed} seconds'
  run-unittest:
    env:
      PRIMUS_WORKDIR: /apps/tas/0_public/primus_k8s_ci
    needs: [code-lint, install-turbo]
    runs-on: [tas-k8s]
    steps:
      - run: echo "🎉 Begin Primus Unit Test."
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          path: Primus
      - name: Move Primus
        run: |
          rm -rf ${PRIMUS_WORKDIR}/Primus
          mv Primus ${PRIMUS_WORKDIR}/
          cd ${PRIMUS_WORKDIR}/Primus
      - name: Install Primus
        working-directory: ${{ env.PRIMUS_WORKDIR }}/Primus
        run: |
          pip install -r requirements.txt
      - name: Set UT_LOG_PATH
        working-directory: ${{ env.PRIMUS_WORKDIR }}/Primus
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "UT_LOG_PATH=${PRIMUS_WORKDIR}/ut_out/pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "UT_LOG_PATH=${PRIMUS_WORKDIR}/ut_out/latest" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            TAG_NAME="${{ github.ref }}"
            TAG="${TAG_NAME#refs/tags/}"
            echo "UT_LOG_PATH=${PRIMUS_WORKDIR}/ut_out/$TAG" >> $GITHUB_ENV
          else
            echo "UT_LOG_PATH=${PRIMUS_WORKDIR}/ut_out/others" >> $GITHUB_ENV
          fi
      - name: Run Unit Tests
        working-directory: ${{ env.PRIMUS_WORKDIR }}/Primus
        env:
          HF_TOKEN: ${{secrets.HF_TOKEN}}
        run: |
          echo "Set UT_LOG_PATH: ${{ env.UT_LOG_PATH }}"
          rm -rf "${{ env.UT_LOG_PATH }}"
          mkdir -p "${{ env.UT_LOG_PATH }}"
          MASTER_PORT=10009 DATA_PATH=/apps/tas/0_public/data \
          python ./tests/run_unit_tests.py
